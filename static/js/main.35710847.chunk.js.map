{"version":3,"sources":["redux/actions/index.js","redux/actions/actionTypes.js","components/DayForecastCard/DayForecastCard.js","components/HomeContainer/HomeCotainer.js","components/FavoriteCard/FavoriteCard.js","components/FavoritesContainer/FavoritesContainer.js","App.js","redux/reducers/weather.js","index.js"],"names":["url","apikey","autoCompleteRequest","text","dispatch","console","log","axios","get","params","q","then","response","type","data","catch","error","getCurrentWeather","locationKey","getFiveDayForecast","metric","changeCurrentLocation","location","changeView","viewName","DayForecastCard","props","className","date","Date","day","getDate","getMonth","getFullYear","getDateString","Intl","DateTimeFormat","weekday","format","src","process","icon","minTemperature","maxTemperature","HomeContainer","useDispatch","useSelector","state","autoCompleteOptions","locationOptions","currentWeather","fiveDayForecast","favorites","currentLocation","useState","map","favorite","LocalizedName","favoritesNames","includes","isInFavorites","setIsInFavorites","useEffect","currentLocationName","currentLocationKey","Key","sendAutoCompleteRequest","useCallback","debounce","input","showError","toast","onInputChange","event","target","value","favoritesButtonText","favoritesButtonIcon","Autocomplete","id","options","getOptionLabel","option","Country","onChange","newValue","onInputSelected","renderInput","TextField","label","variant","position","hideProgressBar","autoClose","closeOnClick","rtl","draggable","closeButton","closeToast","onClick","WeatherIcon","Tooltip","title","arrow","selectedLocation","removeFromFavorites","WeatherText","Temperature","Metric","Value","fiveDayForecastArray","DailyForecasts","dayForecast","push","Minimum","Maximum","Day","Icon","renderFiveDays","FavoriteCard","history","useHistory","FavoritesContainer","App","currentView","activeView","ToggleButtonGroup","exclusive","selectedView","onViewChange","ToggleButton","selected","to","path","weather","action","FavoritesWithNewSelection","FavoritesWithoutNewSelection","filter","store","createStore","applyMiddleware","thunk","render","document","getElementById"],"mappings":"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","file":"static/js/main.35710847.chunk.js","sourcesContent":["import axios from 'axios';\nimport * as actionTypes from './actionTypes';\nimport * as responses from \"../../responses\";\n\nconst url = 'https://dataservice.accuweather.com/';\n//const apikey = 'hAeyfJTj2Wf6wNYPqjRJkbyHACHAOfUH';\n//const apikey = 'Ba9VuPRBgWhHB7J4wQhtnAai5sosoTOP';\n\n//delete this apikey\nconst apikey='kSZfDL3Ikfj4DKCR31Uz3nQFap1mG9xU';\n\nfunction autoCompleteAction(responseData){\n    return {type: actionTypes.ON_AUTOCOMPLETE_SUCCESS, data: responseData};\n};\n\nfunction onRequestFailedAction(){\n    return {type: actionTypes.ON_REQUEST_FAILED};\n};\n\n\nfunction getCurrentWeatherAction(responseData){\n    return {type: actionTypes.ON_GET_CURRENT_WEATHER_SUCCESS, data: responseData};\n};\n\nfunction getFiveDayForecastAction(responseData){\n    return {type: actionTypes.ON_GET_FIVE_DAY_FORECAST_SUCCESS, data: responseData};\n};\n\nexport function autoCompleteRequest(text){\n    return function (dispatch){\n        console.log('in dispatch')\n        //return dispatch(autoCompleteAction(responses.autoCompleteRes));\n        return axios.get(`${url}locations/v1/cities/autocomplete`, {\n            params: {\n                apikey: apikey,\n                q: text\n            }}).then(response => dispatch(autoCompleteAction(response.data)))\n            .catch(error => {dispatch(onRequestFailedAction())});\n     }\n};\n\nexport function getCurrentWeather(locationKey){\n    return function(dispatch){\n        //return  dispatch(getCurrentWeatherAction(responses.currentWeatherResponse));\n        return axios.get(`${url}currentconditions/v1/${locationKey}`, {\n            params: {\n                apikey: apikey,\n            }}).then(response => dispatch(getCurrentWeatherAction(response.data)))\n            .catch(error => {dispatch(onRequestFailedAction())});\n     }\n};\n\nexport function getFiveDayForecast(locationKey){\n    return function(dispatch){\n       // return dispatch(getFiveDayForecastAction(responses.fiveDayForecastResponse));\n        return axios.get(`${url}forecasts/v1/daily/5day/${locationKey}`, {\n            params: {\n                apikey: apikey,\n                metric: true,\n            }}).then(response => dispatch(getFiveDayForecastAction(response.data)))\n            .catch(error => {dispatch(onRequestFailedAction())});\n    };\n};\n\nexport function addToFavorites(selectedLocation){\n    return function(dispatch){\n        return dispatch({type: actionTypes.ON_ADD_TO_FAVORITES, data: selectedLocation});\n    };\n};\n\nexport function removeFromFavorites(selectedLocation){\n    return function(dispatch){\n        return dispatch({type: actionTypes.ON_REMOVE_FROM_FAVORITES, data: selectedLocation});\n    };\n};\n\nexport function changeCurrentLocation(location){\n    return function(dispatch){\n        return dispatch({type: actionTypes.CHANGE_CURRENT_LOCATION, data: location});\n    }\n};\n\nexport function changeView(viewName){\n    return function(dispatch){\n        return dispatch({type: actionTypes.CHANGE_VIEW, data:viewName});\n    }\n};\n\nexport function clearError(){\n    return function(dispatch){\n        console.log('in clear')\n        return dispatch({type: actionTypes.CLEAR_ERROR});\n    }\n};","export const ON_AUTOCOMPLETE_SUCCESS = 'ON_AUTOCOMPLETE_SUCCESS';\nexport const ON_GET_CURRENT_WEATHER_SUCCESS = 'ON_GET_CURRENT_WEATHER_SUCCESS';\nexport const ON_GET_FIVE_DAY_FORECAST_SUCCESS = 'ON_GET_FIVE_DAY_FORECAST_SUCCESS';\nexport const ON_REQUEST_FAILED = 'ON_REQUEST_FAILED';\n\nexport const ON_ADD_TO_FAVORITES = 'ON_ADD_TO_FAVORITES';\nexport const ON_REMOVE_FROM_FAVORITES = 'ON_REMOVE_FROM_FAVORITES';\n\nexport const CHANGE_CURRENT_LOCATION = 'CHANGE_CURRENT_LOCATION';\n\nexport const CLEAR_ERROR = 'CLEAR_ERROR';\n\nexport const CHANGE_VIEW = 'CHANGE_VIEW';\n\n","import React from \"react\";\nimport \"./DayForecastCard.scss\";\n\nfunction DayForecastCard(props) {\n    function getDay(){\n        let options = { weekday: 'long'};\n        let day =  Intl.DateTimeFormat('en-US', options).format(new Date(props.day));\n        return day;\n    }\n    function getDateString(){\n        let date = new Date(props.day)\n        return `${date.getDate()}-${date.getMonth() + 1}-${date.getFullYear()}`//month + 1 because getMonth() returns a number between 0-11\n    }\n    return (\n      <div className='day-forecast-card'>\n          <div className='day-and-date'>\n              <div className='date-string'>{getDateString()}</div>\n              <div className='day-string'>{getDay()}</div>\n          </div>\n          <img className='day-weather-icon' src={`${process.env.PUBLIC_URL}/weatherIcons/${props.icon}.png`}/>\n          <div className='day-temperature'>{`${props.minTemperature}°C/${props.maxTemperature}°C`}</div>\n      </div>\n    );\n};\n\nexport default DayForecastCard;","import React, {useCallback, useEffect, useState} from \"react\";\nimport TextField from '@material-ui/core/TextField';\nimport './HomeContainer.scss';\nimport {\n    addToFavorites,\n    autoCompleteRequest, changeCurrentLocation, clearError,\n    getCurrentWeather,\n    getFiveDayForecast,\n    removeFromFavorites\n} from \"../../redux/actions\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport DayForecastCard from \"../DayForecastCard/DayForecastCard\";\nimport FavoriteBorderOutlinedIcon from '@material-ui/icons/FavoriteBorderOutlined';\nimport FavoriteIcon from \"@material-ui/icons/Favorite\";\nimport Tooltip from '@material-ui/core/Tooltip';\nimport {toast, ToastContainer} from \"react-toastify\";\nimport 'react-toastify/dist/ReactToastify.css';\nimport debounce from 'lodash/debounce';\n\n\nfunction HomeContainer() {\n    const dispatch = useDispatch();\n    const error = useSelector(state => state.error);\n    const autoCompleteOptions = useSelector(state => state.locationOptions);\n    const currentWeather = useSelector(state => state.currentWeather);\n    const fiveDayForecast = useSelector(state => state.fiveDayForecast);\n    const favorites = useSelector(state => state.favorites);\n    const currentLocation = useSelector(state => state.currentLocation);\n    const [favoritesNames, setFavoritesNames] = useState(favorites.map(favorite => (favorite.LocalizedName)));\n    const [isInFavorites, setIsInFavorites] = useState(currentLocation ? favoritesNames.includes(currentLocation.LocalizedName) : null)\n\n    useEffect(() => {\n        console.log('in use effect')\n        console.log(error)\n        let defaultLocationKey = \"215854\"; //Tel Aviv key\n        let defaultLocationName = \"Tel Aviv\";\n        let currentLocationName = currentLocation ? currentLocation.LocalizedName : defaultLocationName;\n        let currentLocationKey = currentLocation ? currentLocation.Key: defaultLocationKey;\n        dispatch(autoCompleteRequest(currentLocationName));\n        dispatch(getCurrentWeather(currentLocationKey));\n        dispatch(getFiveDayForecast(currentLocationKey));\n    }, []);\n\n     const sendAutoCompleteRequest = useCallback(debounce(dispatchAutoComplete, 500), []);\n     const showError = useCallback(()=> {\n         if (error) {\n             toast.error('An error has occurred. Please try again later.');\n         }\n     }, [error]);\n\n    function dispatchAutoComplete(input){\n        dispatch(autoCompleteRequest(input))\n    }\n\n    function onInputChange(event) {\n        sendAutoCompleteRequest(event.target.value)\n    }\n\n\n    function onInputSelected(event, newValue) {\n        if (newValue) {\n            dispatch(changeCurrentLocation(newValue))\n            dispatch(getCurrentWeather(newValue.Key))\n            dispatch(getFiveDayForecast(newValue.Key));\n            setIsInFavorites(favoritesNames.includes(newValue.LocalizedName));\n        }\n    }\n\n    function onAddToFavoritesClicked(){\n        if (!isInFavorites){\n            dispatch(addToFavorites(currentLocation));\n        }\n        else {\n            dispatch(removeFromFavorites(currentLocation))\n        }\n        setIsInFavorites(!isInFavorites);\n    }\n\n\n    function renderFiveDays(){\n        let fiveDayForecastArray = [];\n        fiveDayForecast.DailyForecasts.map(dayForecast => fiveDayForecastArray.push(\n            <DayForecastCard\n                day={dayForecast.Date}\n                minTemperature={dayForecast.Temperature.Minimum.Value}\n                maxTemperature={dayForecast.Temperature.Maximum.Value}\n                icon={dayForecast.Day.Icon}>\n            </DayForecastCard>))\n        return fiveDayForecastArray;\n    }\n\n    let favoritesButtonText = isInFavorites ? \"remove from favorites\": \"add to favorites\";\n    let favoritesButtonIcon = isInFavorites ?  <FavoriteIcon/> : <FavoriteBorderOutlinedIcon/>;\n\n    if (!currentLocation) {\n        if (autoCompleteOptions) {\n            dispatch(changeCurrentLocation(autoCompleteOptions[0]));\n        }\n    }\n    const CloseButton = ({ closeToast }) => (\n        <i\n            className=\"material-icons\"\n            onClick={() => dispatch(clearError())}\n        >\n            delete\n        </i>\n    );\n\n    showError();\n\n    return (\n        <div className='home-container'>\n            <Autocomplete\n                className='search-bar'\n                id=\"combo-box-demo\"\n                options={ autoCompleteOptions ?  autoCompleteOptions : []}\n                getOptionLabel={(option) => `${option.LocalizedName}, ${option.Country.LocalizedName}`}\n                onChange={(event, newValue) => onInputSelected(event, newValue)}\n                renderInput={(params) => <TextField {...params} label=\"Search\" variant=\"outlined\" onChange={onInputChange}/>}\n            />\n            <div className='weather-view'>\n                <ToastContainer position=\"top-center\" hideProgressBar={true} autoClose={false} closeOnClick rtl={false} draggable closeButton={CloseButton}/>\n                <div className='weather-view-header'>\n                    <div className='title'>{currentLocation ? currentLocation.LocalizedName : null}<img className='weather-icon' src={currentWeather ? `${process.env.PUBLIC_URL}/weatherIcons/${currentWeather[0].WeatherIcon}.png`: null}/></div>\n                    <Tooltip title={favoritesButtonText} arrow>\n                        <div className='add-to-favorites-btn' onClick={onAddToFavoritesClicked}>{favoritesButtonIcon}</div>\n                    </Tooltip>\n                </div>\n                <div className='current-weather-text'>{currentWeather ? `${currentWeather[0].WeatherText}` : null}\n                    <span className='current-weather-temperature'>{currentWeather ? ` /${currentWeather[0].Temperature.Metric.Value}°C`: null}</span>\n                </div>\n                <div className='five-days-forecast-container'>\n                    {fiveDayForecast ? renderFiveDays() : null}\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default HomeContainer;\n","import React, {useEffect} from \"react\";\nimport {changeCurrentLocation, changeView, getCurrentWeather} from \"../../redux/actions\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport \"./FavoriteCard.scss\";\nimport { useHistory } from \"react-router-dom\";\n\nfunction FavoriteCard(props){\n    const dispatch = useDispatch();\n    const history = useHistory();\n    const currentWeather = useSelector(state => state.currentWeather)\n\n    useEffect(() => {\n        dispatch(getCurrentWeather(props.favorite.Key))\n    }, [currentWeather]);\n\n    function onFavoriteClicked() {\n        dispatch(changeCurrentLocation(props.favorite))\n        dispatch(changeView(\"home\"))\n        history.push('/');\n    }\n\n    return (\n      <div className=\"favorite-card\" onClick={() => onFavoriteClicked()}>\n          <div className='favorite-name'>{props.favorite.LocalizedName}</div>\n          <img className='favorite-weather-icon' src={currentWeather ? `${process.env.PUBLIC_URL}/weatherIcons/${currentWeather[0].WeatherIcon}.png`: null}/>\n          <div className='favorite-current-temperature'>{currentWeather ? `${currentWeather[0].Temperature.Metric.Value}°`: null}</div>\n      </div>\n    );\n}\n\nexport default FavoriteCard;","import React from \"react\";\nimport {useSelector} from \"react-redux\";\nimport FavoriteCard from \"../FavoriteCard/FavoriteCard\";\nimport \"./FavoritesContainer.scss\"\n\nfunction FavoritesContainer(){\n    const favorites = useSelector(state => state.favorites)\n\n    function renderFavorites() {\n        return favorites.map(favorite => <FavoriteCard favorite={favorite}/>)\n    }\n\n    return (\n      <div className='favorites-container'>\n          {renderFavorites()}\n      </div>\n    );\n}\n\nexport default FavoritesContainer;","import React, {useState} from 'react';\nimport './App.scss';\nimport HomeContainer from './components/HomeContainer/HomeCotainer';\nimport ToggleButtonGroup from '@material-ui/lab/ToggleButtonGroup';\nimport ToggleButton from '@material-ui/lab/ToggleButton';\nimport FavoriteIcon from '@material-ui/icons/Favorite';\nimport HomeIcon from '@material-ui/icons/Home';\nimport FavoritesContainer from \"./components/FavoritesContainer/FavoritesContainer\";\nimport {useDispatch, useSelector} from 'react-redux'\nimport {BrowserRouter as Router, Switch, Route, Link} from \"react-router-dom\";\nimport {changeView} from \"./redux/actions\";\n\nfunction App() {\n\n    const currentView = useSelector(state => state.activeView);\n    const dispatch = useDispatch();\n\n    function onViewChange(event, selectedView){\n        dispatch(changeView(selectedView));\n    }\n\n  return (\n      <Router>\n        <div className=\"app\">\n            <div className='main-header'>\n                <div className='app-title-and-icon'>\n                    <img className='app-icon' src={`${process.env.PUBLIC_URL}/app-icon.png`}/>\n                    <div className='app-title'>HEROLO WEATHER APP</div>\n                </div>\n                <ToggleButtonGroup className='nav-btns' exclusive onChange={(event, selectedView)=>onViewChange(event, selectedView)}>\n                    <ToggleButton value=\"home\" selected={currentView === \"home\"}>\n                        <Link className=\"toggle-btn\" to=\"/\"><HomeIcon/></Link>\n                    </ToggleButton>\n                    <ToggleButton value=\"favorites\" selected={currentView === \"favorites\"}>\n                        <Link className=\"toggle-btn\" to=\"/Favorites\"><FavoriteIcon/></Link>\n                    </ToggleButton>\n                </ToggleButtonGroup>\n            </div>\n            <div className='view-container'>\n            <Switch>\n                <Route path=\"/Favorites\">\n                    <FavoritesContainer />\n                </Route>\n                <Route path=\"/\">\n                    <HomeContainer />\n                </Route>\n            </Switch>\n            </div>\n        </div>\n      </Router>\n  );\n}\n\nexport default App;","import * as actionTypes from '../actions/actionTypes';\n\nconst weather = (state={favorites: [], activeView: \"home\"}, action) => {\n    switch(action.type) {\n        case actionTypes.ON_AUTOCOMPLETE_SUCCESS:\n            return {...state, locationOptions: action.data};\n        case actionTypes.ON_REQUEST_FAILED:\n            console.log('ON_AUTOCOMPLETE_ERROR')\n            return {...state, error: true}\n        case actionTypes.CLEAR_ERROR:\n            console.log('ON_AUTOCOMPLETE_ERROR_CLEAR')\n            return {...state, error: false}\n        case actionTypes.ON_GET_CURRENT_WEATHER_SUCCESS:\n            return {...state, currentWeather: action.data};\n        case actionTypes.ON_GET_FIVE_DAY_FORECAST_SUCCESS:\n            return {...state, fiveDayForecast: action.data};\n        case actionTypes.ON_ADD_TO_FAVORITES:\n            let FavoritesWithNewSelection = state.favorites.push(action.data);\n            return {...state, FavoritesWithNewSelection};\n        case actionTypes.ON_REMOVE_FROM_FAVORITES:\n            let FavoritesWithoutNewSelection = state.favorites.filter(favorite => favorite.LocalizedName != action.data.LocalizedName)\n            return {...state, favorites: FavoritesWithoutNewSelection};\n        case actionTypes.CHANGE_CURRENT_LOCATION:\n            return {...state, currentLocation: action.data};\n        case actionTypes.CHANGE_VIEW:\n            return {...state, activeView:action.data};\n        default:\n            return state;\n    }\n}\n\nexport default weather;","import React from 'react';\nimport './index.css';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport {applyMiddleware, createStore} from 'redux';\nimport { render } from 'react-dom'\nimport weather from \"./redux/reducers/weather\";\nimport thunk from \"redux-thunk\";\n\nconst store = createStore(weather, applyMiddleware(thunk));\n\nrender(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root')\n)\n"],"sourceRoot":""}