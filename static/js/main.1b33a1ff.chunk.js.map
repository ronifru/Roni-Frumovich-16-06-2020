{"version":3,"sources":["redux/reducers/weather.js","redux/actions/actionTypes.js","redux/actions/actions.js","components/DayForecastCard/DayForecastCard.js","components/HomeContainer/HomeCotainer.js","components/FavoriteCard/FavoriteCard.js","components/FavoritesContainer/FavoritesContainer.js","components/App/App.js","index.js"],"names":["weather","state","favorites","activeView","action","type","locationOptions","data","error","currentWeather","fiveDayForecast","favorite","push","FavoritesWithoutNewSelection","filter","locationDetails","LocalizedName","currentLocation","url","apikey","autoCompleteRequest","text","dispatch","axios","get","params","q","then","response","catch","getCurrentWeather","locationKey","getFiveDayForecast","metric","changeCurrentLocation","location","changeView","viewName","DayForecastCard","props","className","date","Date","day","getDate","getMonth","getFullYear","getDateString","Intl","DateTimeFormat","weekday","format","src","process","icon","minTemperature","maxTemperature","HomeContainer","useDispatch","useSelector","autoCompleteOptions","useState","map","favoritesNames","includes","isInFavorites","setIsInFavorites","useEffect","currentLocationName","currentLocationKey","Key","sendAutoCompleteRequest","useCallback","debounce","input","showError","toast","onInputChange","event","target","value","favoritesButtonText","favoritesButtonIcon","Autocomplete","id","options","getOptionLabel","option","Country","onChange","newValue","onInputSelected","renderInput","TextField","label","variant","position","hideProgressBar","autoClose","closeOnClick","rtl","draggable","closeButton","closeToast","onClick","WeatherIcon","Tooltip","title","arrow","selectedLocation","addToFavorites","WeatherText","Temperature","Metric","Value","fiveDayForecastArray","DailyForecasts","dayForecast","Minimum","Maximum","Day","Icon","renderFiveDays","FavoriteCard","history","useHistory","FavoritesContainer","favoritesComponents","length","App","currentView","ToggleButtonGroup","exclusive","selectedView","onViewChange","ToggleButton","selected","to","path","store","createStore","applyMiddleware","thunk","render","document","getElementById"],"mappings":"mSA8BeA,EA5BC,WAAwD,IAAvDC,EAAsD,uDAAhD,CAACC,UAAW,GAAIC,WAAY,QAASC,EAAW,uCACnE,OAAOA,EAAOC,MACV,ICJ+B,0BDK3B,OAAO,2BAAIJ,GAAX,IAAkBK,gBAAiBF,EAAOG,OAC9C,ICHyB,oBDIrB,OAAO,2BAAIN,GAAX,IAAkBO,OAAO,IAC7B,ICEmB,cDDf,OAAO,2BAAIP,GAAX,IAAkBO,OAAO,IAC7B,ICTsC,iCDUlC,OAAO,2BAAIP,GAAX,IAAkBQ,eAAgBL,EAAOG,OAC7C,ICVwC,mCDWpC,OAAO,2BAAIN,GAAX,IAAkBS,gBAAiBN,EAAOG,OAC9C,ICT2B,sBDUvB,IAAII,EAAWP,EAAOG,KAAKI,SAE3B,OADAV,EAAMC,UAAUU,KAAKD,GACd,eAAIV,GACf,ICZgC,2BDa5B,IAAIY,EAA+BZ,EAAMC,UAAUY,QAAO,SAAAH,GAAQ,OAAIA,EAASI,gBAAgBC,eAAiBZ,EAAOG,KAAKS,iBAC5H,OAAO,2BAAIf,GAAX,IAAkBC,UAAWW,IACjC,ICb+B,0BDc3B,OAAO,2BAAIZ,GAAX,IAAkBgB,gBAAiBb,EAAOG,OAC9C,ICXmB,cDYf,OAAO,2BAAIN,GAAX,IAAkBE,WAAWC,EAAOG,OACxC,QACI,OAAON,I,4DEvBbiB,EAAM,uCACNC,EAAO,mCAmBN,SAASC,EAAoBC,GAChC,OAAO,SAAUC,GACb,OAAOC,IAAMC,IAAN,UAAaN,EAAb,oCAAoD,CACvDO,OAAQ,CACJN,OAAQA,EACRO,EAAGL,KACHM,MAAK,SAAAC,GAAQ,OAAIN,EAtBtB,CAACjB,KDP2B,0BCOgBE,KAsBMqB,EAASrB,UACzDsB,OAAM,SAAArB,GAAUc,EAnBlB,CAACjB,KDRqB,0BC+B1B,SAASyB,EAAkBC,GAC9B,OAAO,SAAST,GACZ,OAAOC,IAAMC,IAAN,UAAaN,EAAb,gCAAwCa,GAAe,CAC1DN,OAAQ,CACJN,OAAQA,KACRQ,MAAK,SAAAC,GAAQ,OAAIN,EAvBtB,CAACjB,KDfkC,iCCegBE,KAuBIqB,EAASrB,UAC9DsB,OAAM,SAAArB,GAAUc,EA7BlB,CAACjB,KDRqB,0BCyC1B,SAAS2B,EAAmBD,GAC/B,OAAO,SAAST,GACZ,OAAOC,IAAMC,IAAN,UAAaN,EAAb,mCAA2Ca,GAAe,CAC7DN,OAAQ,CACJN,OAAQA,EACRc,QAAQ,KACRN,MAAK,SAAAC,GAAQ,OAAIN,EA9BtB,CAACjB,KDlBoC,mCCkBgBE,KA8BGqB,EAASrB,UAC/DsB,OAAM,SAAArB,GAAUc,EAxClB,CAACjB,KDRqB,0BCgE1B,SAAS6B,EAAsBC,GAClC,OAAO,SAASb,GACZ,OAAOA,EAAS,CAACjB,KD7Dc,0BC6D6BE,KAAM4B,KAInE,SAASC,EAAWC,GACvB,OAAO,SAASf,GACZ,OAAOA,EAAS,CAACjB,KD/DE,cC+D6BE,KAAK8B,K,oBClD9CC,MAtBf,SAAyBC,GAUrB,OACE,yBAAKC,UAAU,qBACX,yBAAKA,UAAU,gBACX,yBAAKA,UAAU,eAPzB,WACI,IAAIC,EAAO,IAAIC,KAAKH,EAAMI,KAC1B,MAAM,GAAN,OAAUF,EAAKG,UAAf,YAA4BH,EAAKI,WAAa,EAA9C,YAAmDJ,EAAKK,eAKpBC,IAC9B,yBAAKP,UAAU,cAXVQ,KAAKC,eAAe,QADjB,CAAEC,QAAS,SACwBC,OAAO,IAAIT,KAAKH,EAAMI,QAarE,yBAAKH,UAAU,mBAAmBY,IAAG,UAAKC,eAAL,yBAA4Cd,EAAMe,KAAlD,UACrC,yBAAKd,UAAU,mBAAf,UAAqCD,EAAMgB,eAA3C,iBAA+DhB,EAAMiB,eAArE,Y,6ECuHKC,MAtHf,WACI,IAAMnC,EAAWoC,cACXlD,EAAQmD,aAAY,SAAA1D,GAAK,OAAIA,EAAMO,SACnCoD,EAAsBD,aAAY,SAAA1D,GAAK,OAAIA,EAAMK,mBACjDG,EAAiBkD,aAAY,SAAA1D,GAAK,OAAIA,EAAMQ,kBAC5CC,EAAkBiD,aAAY,SAAA1D,GAAK,OAAIA,EAAMS,mBAC7CR,EAAYyD,aAAY,SAAA1D,GAAK,OAAIA,EAAMC,aACvCe,EAAkB0C,aAAY,SAAA1D,GAAK,OAAIA,EAAMgB,mBAP9B,EAQuB4C,mBAAS3D,EAAU4D,KAAI,SAAAnD,GAAQ,OAAKA,EAASI,gBAAgBC,kBARpF,mBAQd+C,EARc,aASqBF,mBAAS5C,EAAkB8C,EAAeC,SAAS/C,EAAgBD,eAAiB,OATzG,mBASdiD,EATc,KASCC,EATD,KAWrBC,qBAAU,WACN,IAEIC,EAAsBnD,EAAkBA,EAAgBD,cADlC,WAEtBqD,EAAqBpD,EAAkBA,EAAgBqD,IAHlC,SAIzBhD,EAASF,EAAoBgD,IAC7B9C,EAASQ,EAAkBuC,IAC3B/C,EAASU,EAAmBqC,MAC7B,IAEF,IAAME,EAA0BC,sBAAYC,KAO7C,SAA8BC,GAC1BpD,EAASF,EAAoBsD,MAR2C,KAAM,IAC3EC,EAAYH,uBAAY,WACtBhE,GACAoE,IAAMpE,MAAM,oDAEjB,CAACA,IAML,SAASqE,EAAcC,GACnBP,EAAwBO,EAAMC,OAAOC,OAqCzC,IAAIC,EAAsBhB,EAAgB,wBAAyB,mBAC/DiB,EAAsBjB,EAAiB,kBAAC,IAAD,MAAkB,kBAAC,IAAD,MAkB7D,OAhBKhD,GACG2C,GACAtC,EAASY,EAAsB0B,EAAoB,KAY3De,IAGI,yBAAKnC,UAAU,kBACX,kBAAC2C,EAAA,EAAD,CACI3C,UAAU,aACV4C,GAAG,iBACHC,QAAUzB,GAA6C,GACvD0B,eAAgB,SAACC,GAAD,gBAAeA,EAAOvE,cAAtB,aAAwCuE,EAAOC,QAAQxE,gBACvEyE,SAAU,SAACX,EAAOY,GAAR,OA3DtB,SAAyBZ,EAAOY,GACxBA,IACApE,EAASY,EAAsBwD,IAC/BpE,EAASQ,EAAkB4D,EAASpB,MACpChD,EAASU,EAAmB0D,EAASpB,MACrCJ,EAAiBH,EAAeC,SAAS0B,EAAS1E,iBAsDf2E,CAAgBb,EAAOY,IACtDE,YAAa,SAACnE,GAAD,OAAY,kBAACoE,EAAA,EAAD,iBAAepE,EAAf,CAAuBqE,MAAM,SAASC,QAAQ,WAAWN,SAAUZ,QAEhG,yBAAKrC,UAAU,gBACX,kBAAC,IAAD,CAAgBwD,SAAS,aAAaC,iBAAiB,EAAMC,WAAW,EAAOC,cAAY,EAACC,KAAK,EAAOC,WAAS,EAACC,YAtB1G,SAAC,GAAD,EAAGC,WAAH,OAChB,uBACI/D,UAAU,iBACVgE,QAAS,kBAAMlF,GFtBhB,SAASA,GACZ,OAAOA,EAAS,CAACjB,KDvEE,qBG0FnB,aAsBQ,yBAAKmC,UAAU,uBACX,yBAAKA,UAAU,SAASvB,EAAkBA,EAAgBD,cAAgB,KAAK,yBAAKwB,UAAU,eAAeY,IAAK3C,EAAc,UAAM4C,eAAN,yBAA6C5C,EAAe,GAAGgG,YAA/D,QAAkF,QAClN,kBAACC,EAAA,EAAD,CAASC,MAAO1B,EAAqB2B,OAAK,GACtC,yBAAKpE,UAAU,uBAAuBgE,QA1D1D,WAEQ,IFRwBK,EEYxBvF,EALC2C,GFPuB4C,EEYK5F,EFX9B,SAASK,GACZ,OAAOA,EAAS,CAACjB,KDzDe,2BCyD6BE,KAAMsG,MARpE,SAAwBlG,GAC3B,OAAO,SAASW,GACZ,OAAOA,EAAS,CAACjB,KDpDU,sBCoD6BE,KAAM,CAACI,eEalDmG,CADM,CAAC/F,gBAAiBE,EAAiBR,eAAgBA,KAMtEyD,GAAkBD,KAkDuEiB,KAGjF,yBAAK1C,UAAU,wBAAwB/B,EAAc,UAAMA,EAAe,GAAGsG,aAAgB,KACzF,0BAAMvE,UAAU,+BAA+B/B,EAAc,YAAQA,EAAe,GAAGuG,YAAYC,OAAOC,MAA7C,SAAwD,OAEzH,yBAAK1E,UAAU,gCACV9B,EArDjB,WACI,IAAIyG,EAAuB,GAQ3B,OAPAzG,EAAgB0G,eAAetD,KAAI,SAAAuD,GAAW,OAAIF,EAAqBvG,KACnE,kBAAC,EAAD,CACI+B,IAAK0E,EAAY3E,KACjBa,eAAgB8D,EAAYL,YAAYM,QAAQJ,MAChD1D,eAAgB6D,EAAYL,YAAYO,QAAQL,MAChD5D,KAAM+D,EAAYG,IAAIC,WAEvBN,EA4CwBO,GAAmB,S,oDC3G3CC,MAnBf,SAAsBpF,GAClB,IAAMjB,EAAWoC,cACXkE,EAAUC,cAQhB,OACE,yBAAKrF,UAAU,gBAAgBgE,QAAS,kBANtClF,EAASY,EAAsBK,EAAM5B,SAASI,kBAC9CO,EAASc,EAAW,cACpBwF,EAAQhH,KAAK,OAKX,yBAAK4B,UAAU,iBAAiBD,EAAM5B,SAASI,gBAAgBC,eAC/D,yBAAKwB,UAAU,wBAAwBY,IAAKb,EAAM5B,SAASF,eAAf,UAAmC4C,eAAnC,yBAA0Ed,EAAM5B,SAASF,eAAe,GAAGgG,YAA3G,QAA8H,OAC1K,yBAAKjE,UAAU,gCAAgCD,EAAM5B,SAASF,eAAf,UAAmC8B,EAAM5B,SAASF,eAAe,GAAGuG,YAAYC,OAAOC,MAAvF,QAAkG,Q,OCD5IY,MAdf,WAMI,IAAIC,EALcpE,aAAY,SAAA1D,GAAK,OAAIA,EAAMC,aAGxB4D,KAAI,SAAAnD,GAAQ,OAAI,kBAAC,EAAD,CAAcA,SAAUA,OAG7D,OACE,yBAAK6B,UAAU,uBACoB,GAA9BuF,EAAoBC,OAAcD,EAAsB,yBAAKvF,UAAU,wBAAf,yB,QCuCpDyF,MAzCf,WAEI,IAAMC,EAAcvE,aAAY,SAAA1D,GAAK,OAAIA,EAAME,cACzCmB,EAAWoC,cAMnB,OACI,kBAAC,IAAD,KACE,yBAAKlB,UAAU,OACX,yBAAKA,UAAU,eACX,yBAAKA,UAAU,sBACX,yBAAKA,UAAU,WAAWY,IAAG,UAAKC,eAAL,mBAC7B,yBAAKb,UAAU,aAAf,uBAEJ,kBAAC2F,EAAA,EAAD,CAAmB3F,UAAU,WAAW4F,WAAS,EAAC3C,SAAU,SAACX,EAAOuD,GAAR,OAZxE,SAAsBvD,EAAOuD,GACzB/G,EAASc,EAAWiG,IAWuEC,CAAaxD,EAAOuD,KACnG,kBAACE,EAAA,EAAD,CAAcvD,MAAM,OAAOwD,SAA0B,SAAhBN,GACjC,kBAAC,IAAD,CAAM1F,UAAU,aAAaiG,GAAG,KAAI,kBAAC,IAAD,QAExC,kBAACF,EAAA,EAAD,CAAcvD,MAAM,YAAYwD,SAA0B,cAAhBN,GACtC,kBAAC,IAAD,CAAM1F,UAAU,aAAaiG,GAAG,cAAa,kBAAC,IAAD,UAIzD,yBAAKjG,UAAU,kBACf,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOkG,KAAK,cACR,kBAAC,EAAD,OAEJ,kBAAC,IAAD,CAAOA,KAAK,KACR,kBAAC,EAAD,YClCdC,EAAQC,YAAY5I,EAAS6I,YAAgBC,MAEnDC,iBACI,kBAAC,IAAD,CAAUJ,MAAOA,GACb,kBAAC,EAAD,OAEJK,SAASC,eAAe,U","file":"static/js/main.1b33a1ff.chunk.js","sourcesContent":["import * as actionTypes from '../actions/actionTypes';\n\nconst weather = (state={favorites: [], activeView: \"home\"}, action) => {\n    switch(action.type) {\n        case actionTypes.ON_AUTOCOMPLETE_SUCCESS:\n            return {...state, locationOptions: action.data};\n        case actionTypes.ON_REQUEST_FAILED:\n            return {...state, error: true}\n        case actionTypes.CLEAR_ERROR:\n            return {...state, error: false}\n        case actionTypes.ON_GET_CURRENT_WEATHER_SUCCESS:\n            return {...state, currentWeather: action.data};\n        case actionTypes.ON_GET_FIVE_DAY_FORECAST_SUCCESS:\n            return {...state, fiveDayForecast: action.data};\n        case actionTypes.ON_ADD_TO_FAVORITES:\n            let favorite = action.data.favorite;\n            state.favorites.push(favorite);\n            return {...state};\n        case actionTypes.ON_REMOVE_FROM_FAVORITES:\n            let FavoritesWithoutNewSelection = state.favorites.filter(favorite => favorite.locationDetails.LocalizedName != action.data.LocalizedName)\n            return {...state, favorites: FavoritesWithoutNewSelection};\n        case actionTypes.CHANGE_CURRENT_LOCATION:\n            return {...state, currentLocation: action.data};\n        case actionTypes.CHANGE_VIEW:\n            return {...state, activeView:action.data};\n        default:\n            return state;\n    }\n}\n\nexport default weather;","export const ON_AUTOCOMPLETE_SUCCESS = 'ON_AUTOCOMPLETE_SUCCESS';\nexport const ON_GET_CURRENT_WEATHER_SUCCESS = 'ON_GET_CURRENT_WEATHER_SUCCESS';\nexport const ON_GET_FIVE_DAY_FORECAST_SUCCESS = 'ON_GET_FIVE_DAY_FORECAST_SUCCESS';\nexport const ON_REQUEST_FAILED = 'ON_REQUEST_FAILED';\n\nexport const ON_ADD_TO_FAVORITES = 'ON_ADD_TO_FAVORITES';\nexport const ON_REMOVE_FROM_FAVORITES = 'ON_REMOVE_FROM_FAVORITES';\n\nexport const CHANGE_CURRENT_LOCATION = 'CHANGE_CURRENT_LOCATION';\n\nexport const CLEAR_ERROR = 'CLEAR_ERROR';\n\nexport const CHANGE_VIEW = 'CHANGE_VIEW';\n\n","import axios from 'axios';\nimport * as actionTypes from './actionTypes';\n\nconst url = 'https://dataservice.accuweather.com/';\nconst apikey='hTWbeMVgqncaqwA6kUHvP5axkjmWGNmP';\n\nfunction autoCompleteAction(responseData){\n    return {type: actionTypes.ON_AUTOCOMPLETE_SUCCESS, data: responseData};\n};\n\nfunction onRequestFailedAction(){\n    return {type: actionTypes.ON_REQUEST_FAILED};\n};\n\n\nfunction getCurrentWeatherAction(responseData){\n    return {type: actionTypes.ON_GET_CURRENT_WEATHER_SUCCESS, data: responseData};\n};\n\nfunction getFiveDayForecastAction(responseData){\n    return {type: actionTypes.ON_GET_FIVE_DAY_FORECAST_SUCCESS, data: responseData};\n};\n\nexport function autoCompleteRequest(text){\n    return function (dispatch){\n        return axios.get(`${url}locations/v1/cities/autocomplete`, {\n            params: {\n                apikey: apikey,\n                q: text\n            }}).then(response => dispatch(autoCompleteAction(response.data)))\n            .catch(error => {dispatch(onRequestFailedAction())});\n      }\n};\n\nexport function getCurrentWeather(locationKey){\n    return function(dispatch){\n        return axios.get(`${url}currentconditions/v1/${locationKey}`, {\n            params: {\n                apikey: apikey,\n            }}).then(response => dispatch(getCurrentWeatherAction(response.data)))\n            .catch(error => {dispatch(onRequestFailedAction())});\n      }\n};\n\nexport function getFiveDayForecast(locationKey){\n    return function(dispatch){\n        return axios.get(`${url}forecasts/v1/daily/5day/${locationKey}`, {\n            params: {\n                apikey: apikey,\n                metric: true,\n            }}).then(response => dispatch(getFiveDayForecastAction(response.data)))\n            .catch(error => {dispatch(onRequestFailedAction())});\n    };\n};\n\nexport function addToFavorites(favorite){\n    return function(dispatch){\n        return dispatch({type: actionTypes.ON_ADD_TO_FAVORITES, data: {favorite}});\n    };\n};\n\nexport function removeFromFavorites(selectedLocation){\n    return function(dispatch){\n        return dispatch({type: actionTypes.ON_REMOVE_FROM_FAVORITES, data: selectedLocation});\n    };\n};\n\nexport function changeCurrentLocation(location){\n    return function(dispatch){\n        return dispatch({type: actionTypes.CHANGE_CURRENT_LOCATION, data: location});\n    }\n};\n\nexport function changeView(viewName){\n    return function(dispatch){\n        return dispatch({type: actionTypes.CHANGE_VIEW, data:viewName});\n    }\n};\n\nexport function clearError(){\n    return function(dispatch){\n        return dispatch({type: actionTypes.CLEAR_ERROR});\n    }\n};","import React from \"react\";\nimport \"./DayForecastCard.scss\";\n\nfunction DayForecastCard(props) {\n    function getDay(){\n        let options = { weekday: 'long'};\n        let day =  Intl.DateTimeFormat('en-US', options).format(new Date(props.day));\n        return day;\n    }\n    function getDateString(){\n        let date = new Date(props.day)\n        return `${date.getDate()}-${date.getMonth() + 1}-${date.getFullYear()}`//month + 1 because getMonth() returns a number between 0-11\n    }\n    return (\n      <div className='day-forecast-card'>\n          <div className='day-and-date'>\n              <div className='date-string'>{getDateString()}</div>\n              <div className='day-string'>{getDay()}</div>\n          </div>\n          <img className='day-weather-icon' src={`${process.env.PUBLIC_URL}/weatherIcons/${props.icon}.png`}/>\n          <div className='day-temperature'>{`${props.minTemperature}°C/${props.maxTemperature}°C`}</div>\n      </div>\n    );\n};\n\nexport default DayForecastCard;","import React, {useCallback, useEffect, useState} from \"react\";\nimport TextField from '@material-ui/core/TextField';\nimport './HomeContainer.scss';\nimport {\n    addToFavorites,\n    autoCompleteRequest, changeCurrentLocation, clearError,\n    getCurrentWeather,\n    getFiveDayForecast,\n    removeFromFavorites\n} from \"../../redux/actions/actions\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport DayForecastCard from \"../DayForecastCard/DayForecastCard\";\nimport FavoriteBorderOutlinedIcon from '@material-ui/icons/FavoriteBorderOutlined';\nimport FavoriteIcon from \"@material-ui/icons/Favorite\";\nimport Tooltip from '@material-ui/core/Tooltip';\nimport {toast, ToastContainer} from \"react-toastify\";\nimport 'react-toastify/dist/ReactToastify.css';\nimport debounce from 'lodash/debounce';\n\n\nfunction HomeContainer() {\n    const dispatch = useDispatch();\n    const error = useSelector(state => state.error);\n    const autoCompleteOptions = useSelector(state => state.locationOptions);\n    const currentWeather = useSelector(state => state.currentWeather);\n    const fiveDayForecast = useSelector(state => state.fiveDayForecast);\n    const favorites = useSelector(state => state.favorites);\n    const currentLocation = useSelector(state => state.currentLocation);\n    const [favoritesNames, setFavoritesNames] = useState(favorites.map(favorite => (favorite.locationDetails.LocalizedName)));\n    const [isInFavorites, setIsInFavorites] = useState(currentLocation ? favoritesNames.includes(currentLocation.LocalizedName) : null)\n\n    useEffect(() => {\n        let defaultLocationKey = \"215854\"; //Tel Aviv key\n        let defaultLocationName = \"Tel Aviv\";\n        let currentLocationName = currentLocation ? currentLocation.LocalizedName : defaultLocationName;\n        let currentLocationKey = currentLocation ? currentLocation.Key: defaultLocationKey;\n        dispatch(autoCompleteRequest(currentLocationName));\n        dispatch(getCurrentWeather(currentLocationKey));\n        dispatch(getFiveDayForecast(currentLocationKey));\n    }, []);\n\n     const sendAutoCompleteRequest = useCallback(debounce(dispatchAutoComplete, 500), []);\n     const showError = useCallback(()=> {\n         if (error) {\n             toast.error('An error has occurred. Please try again later.');\n         }\n     }, [error]);\n\n    function dispatchAutoComplete(input){\n        dispatch(autoCompleteRequest(input))\n    }\n\n    function onInputChange(event) {\n        sendAutoCompleteRequest(event.target.value)\n    }\n\n\n    function onInputSelected(event, newValue) {\n        if (newValue) {\n            dispatch(changeCurrentLocation(newValue))\n            dispatch(getCurrentWeather(newValue.Key))\n            dispatch(getFiveDayForecast(newValue.Key));\n            setIsInFavorites(favoritesNames.includes(newValue.LocalizedName));\n        }\n    }\n\n    function onAddToFavoritesClicked(){\n        if (!isInFavorites){\n            let favorite = {locationDetails: currentLocation, currentWeather: currentWeather}\n            dispatch(addToFavorites(favorite));\n        }\n        else {\n            dispatch(removeFromFavorites(currentLocation))\n        }\n        setIsInFavorites(!isInFavorites);\n    }\n\n\n    function renderFiveDays(){\n        let fiveDayForecastArray = [];\n        fiveDayForecast.DailyForecasts.map(dayForecast => fiveDayForecastArray.push(\n            <DayForecastCard\n                day={dayForecast.Date}\n                minTemperature={dayForecast.Temperature.Minimum.Value}\n                maxTemperature={dayForecast.Temperature.Maximum.Value}\n                icon={dayForecast.Day.Icon}>\n            </DayForecastCard>))\n        return fiveDayForecastArray;\n    }\n\n    let favoritesButtonText = isInFavorites ? \"remove from favorites\": \"add to favorites\";\n    let favoritesButtonIcon = isInFavorites ?  <FavoriteIcon/> : <FavoriteBorderOutlinedIcon/>;\n\n    if (!currentLocation) {\n        if (autoCompleteOptions) {\n            dispatch(changeCurrentLocation(autoCompleteOptions[0]));\n        }\n    }\n    const CloseButton = ({ closeToast }) => (\n        <i\n            className=\"material-icons\"\n            onClick={() => dispatch(clearError())}\n        >\n            delete\n        </i>\n    );\n\n    showError();\n\n    return (\n        <div className='home-container'>\n            <Autocomplete\n                className='search-bar'\n                id=\"combo-box-demo\"\n                options={ autoCompleteOptions ?  autoCompleteOptions : []}\n                getOptionLabel={(option) => `${option.LocalizedName}, ${option.Country.LocalizedName}`}\n                onChange={(event, newValue) => onInputSelected(event, newValue)}\n                renderInput={(params) => <TextField {...params} label=\"Search\" variant=\"outlined\" onChange={onInputChange}/>}\n            />\n            <div className='weather-view'>\n                <ToastContainer position=\"top-center\" hideProgressBar={true} autoClose={false} closeOnClick rtl={false} draggable closeButton={CloseButton}/>\n                <div className='weather-view-header'>\n                    <div className='title'>{currentLocation ? currentLocation.LocalizedName : null}<img className='weather-icon' src={currentWeather ? `${process.env.PUBLIC_URL}/weatherIcons/${currentWeather[0].WeatherIcon}.png`: null}/></div>\n                    <Tooltip title={favoritesButtonText} arrow>\n                        <div className='add-to-favorites-btn' onClick={onAddToFavoritesClicked}>{favoritesButtonIcon}</div>\n                    </Tooltip>\n                </div>\n                <div className='current-weather-text'>{currentWeather ? `${currentWeather[0].WeatherText}` : null}\n                    <span className='current-weather-temperature'>{currentWeather ? ` /${currentWeather[0].Temperature.Metric.Value}°C`: null}</span>\n                </div>\n                <div className='five-days-forecast-container'>\n                    {fiveDayForecast ? renderFiveDays() : null}\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default HomeContainer;\n","import React, {useEffect} from \"react\";\nimport {changeCurrentLocation, changeView, getCurrentWeather} from \"../../redux/actions/actions\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport \"./FavoriteCard.scss\";\nimport { useHistory } from \"react-router-dom\";\n\nfunction FavoriteCard(props){\n    const dispatch = useDispatch();\n    const history = useHistory();\n\n    function onFavoriteClicked() {\n        dispatch(changeCurrentLocation(props.favorite.locationDetails))\n        dispatch(changeView(\"home\"))\n        history.push('/');\n    }\n\n    return (\n      <div className=\"favorite-card\" onClick={() => onFavoriteClicked()}>\n          <div className='favorite-name'>{props.favorite.locationDetails.LocalizedName}</div>\n          <img className='favorite-weather-icon' src={props.favorite.currentWeather ? `${process.env.PUBLIC_URL}/weatherIcons/${props.favorite.currentWeather[0].WeatherIcon}.png`: null}/>\n          <div className='favorite-current-temperature'>{props.favorite.currentWeather ? `${props.favorite.currentWeather[0].Temperature.Metric.Value}°` : null}</div>\n      </div>\n    );\n}\n\nexport default FavoriteCard;","import React from \"react\";\nimport {useSelector} from \"react-redux\";\nimport FavoriteCard from \"../FavoriteCard/FavoriteCard\";\nimport \"./FavoritesContainer.scss\"\n\nfunction FavoritesContainer(){\n    const favorites = useSelector(state => state.favorites)\n\n    function renderFavorites() {\n        return favorites.map(favorite => <FavoriteCard favorite={favorite}/>)\n    }\n    let favoritesComponents = renderFavorites();\n    return (\n      <div className='favorites-container'>\n          {favoritesComponents.length != 0 ? favoritesComponents : <div className='no-favorites-message'>No  Saved Favorites</div>}\n      </div>\n    );\n}\n\nexport default FavoritesContainer;","import React, {useState} from 'react';\nimport './App.scss';\nimport HomeContainer from '../HomeContainer/HomeCotainer';\nimport ToggleButtonGroup from '@material-ui/lab/ToggleButtonGroup';\nimport ToggleButton from '@material-ui/lab/ToggleButton';\nimport FavoriteIcon from '@material-ui/icons/Favorite';\nimport HomeIcon from '@material-ui/icons/Home';\nimport FavoritesContainer from \"../FavoritesContainer/FavoritesContainer\";\nimport {useDispatch, useSelector} from 'react-redux'\nimport {BrowserRouter as Router, Switch, Route, Link} from \"react-router-dom\";\nimport {changeView} from \"../../redux/actions/actions\";\n\nfunction App() {\n\n    const currentView = useSelector(state => state.activeView);\n    const dispatch = useDispatch();\n\n    function onViewChange(event, selectedView){\n        dispatch(changeView(selectedView));\n    }\n\n  return (\n      <Router>\n        <div className=\"app\">\n            <div className='main-header'>\n                <div className='app-title-and-icon'>\n                    <img className='app-icon' src={`${process.env.PUBLIC_URL}/app-icon.png`}/>\n                    <div className='app-title'>HEROLO WEATHER APP</div>\n                </div>\n                <ToggleButtonGroup className='nav-btns' exclusive onChange={(event, selectedView)=>onViewChange(event, selectedView)}>\n                    <ToggleButton value=\"home\" selected={currentView === \"home\"}>\n                        <Link className=\"toggle-btn\" to=\"/\"><HomeIcon/></Link>\n                    </ToggleButton>\n                    <ToggleButton value=\"favorites\" selected={currentView === \"favorites\"}>\n                        <Link className=\"toggle-btn\" to=\"/Favorites\"><FavoriteIcon/></Link>\n                    </ToggleButton>\n                </ToggleButtonGroup>\n            </div>\n            <div className='view-container'>\n            <Switch>\n                <Route path=\"/Favorites\">\n                    <FavoritesContainer />\n                </Route>\n                <Route path=\"/\">\n                    <HomeContainer />\n                </Route>\n            </Switch>\n            </div>\n        </div>\n      </Router>\n  );\n}\n\nexport default App;","import React from 'react';\nimport './index.css';\n\nimport { Provider } from 'react-redux';\nimport {applyMiddleware, createStore} from 'redux';\nimport { render } from 'react-dom'\nimport weather from \"./redux/reducers/weather\";\nimport thunk from \"redux-thunk\";\nimport App from \"./components/App/App\";\n\nconst store = createStore(weather, applyMiddleware(thunk));\n\nrender(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root')\n)\n"],"sourceRoot":""}